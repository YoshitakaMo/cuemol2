#include <common.h>

#include "SDFMolWriter.hpp"

#include <modules/molstr/MolAtom.hpp>
#include <modules/molstr/MolChain.hpp>
#include <modules/molstr/MolCoord.hpp>
#include <modules/molstr/MolResidue.hpp>
#include <modules/molstr/ResidIterator.hpp>
#include <qlib/PrintStream.hpp>

namespace importers {

SDFMolWriter::SDFMolWriter() {}

SDFMolWriter::~SDFMolWriter() {}

/// Attach to and lock the target object
void SDFMolWriter::attach(qsys::ObjectPtr pObj)
{
    if (!canHandle(pObj)) {
        MB_THROW(qlib::InvalidCastException, "SDFMolWriter");
        return;
    }
    super_t::attach(pObj);
}

/// get file-type description
const char *SDFMolWriter::getTypeDescr() const
{
    return "MOL/SDF Coordinates (*.mol;*.sdf)";
}

/// get file extension
const char *SDFMolWriter::getFileExt() const
{
    return "*.mol; *.sdf";
}

const char *SDFMolWriter::getName() const
{
    return "sdf";
}

bool SDFMolWriter::canHandle(qsys::ObjectPtr pobj) const
{
    return (dynamic_cast<MolCoord *>(pobj.get()) != NULL);
}

//////////

// write SDF to stream
bool SDFMolWriter::write(qlib::OutStream &outs)
{
    m_pMol = MolCoordPtr(getTarget<MolCoord>());

    if (m_pMol.isnull()) {
        LOG_DPRINTLN("SDFWriter> MolCoord is not attached !!");
        return false;
    }

    qlib::PrintStream prs(outs);
    prs.formatln("SDFile Generated by CueMol2");
    prs.formatln("");
    prs.formatln("");

    int natoms = m_pMol->getAtomSize();
    int nbonds = m_pMol->getBondSize();
    // 59 60  0  0  0  0  0  0  0  0999 V2000
    prs.formatln("% 3d% 3d  0  0  0  0  0  0  0  0999 V2000", natoms, nbonds);

    //   15.0880   10.7980   23.5470  N 0  3  0  4  0  4
    int index = 0;
    for (auto iter = m_pMol->beginAtom(); iter != m_pMol->endAtom(); ++iter, ++index) {
        auto patom = iter->second;
        prs.formatln("%d", index);
    }

    prs.println("END");
    return true;
}

}  // namespace importers
